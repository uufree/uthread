CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(HPRThread)

OPTION(WITH_DEBUG "whether to build with debug" OFF)
OPTION(PRINT_TIME "whether to print time" OFF)
OPTION(USE_CPP11 "whether to use cpp11" ON)
OPTION(BUILD_SAMPLE "whether to build samples" ON)
OPTION(BUILD_LIBRARY "whether to build library" ON)

IF(PRINT_TIME)
	ADD_DEFINITIONS(-DPRINT_TIME)
	MESSAGE(STATUS "YOU SELECT PRINT TIME!")
ELSE()
	MESSAGE(STATUS "YOU NOT SELECT PRINT TIME!")
ENDIF()

SET(WINDOWS NO)
SET(LINUX NO)
IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
	SET(LINUX YES)
	MESSAGE(STATUS "OS:LINUX ${LINUX}")
ELSEIF(CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
	SET(WINDOWS YES)
	MESSAGE(STATUS "OS:WINDOWS ${WINDOWS}")
ELSE()
	MESSAGE(STATUS "NOT SUPPORT THIS PLATFROMS")
ENDIF()

IF(WITH_DEBUG)
	IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
		SET(CXX_COMPLIER_FLAG "-g -Wall")
		MESSAGE(STATUS "YOU COMPLIE THE CODE WITH DEBUG!")
	ELSEIF(CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
		MESSAGE(FATAL_ERROR "We will support Windows in future!")
	ENDIF()
ELSE()
	MESSAGE(STATUS "YOU COMPLIE THE CODE WITHOUT DEBUG!")
ENDIF()

IF(USE_CPP11)
	IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
		SET(CPP11_ENABLED_FLAGS "-std=c++11")
		MESSAGE(STATUS "USE C++11 !")
	ELSEIF(CMAKE_HOST_SYSTEM_NAME MATCHES Windows)

	ENDIF()
ENDIF()

##########################set complier flag and path######################
IF(LINUX)
	SET(CMAKE_CXX_FLAGS "${CXX_COMPLIER_FLAG} ${CPP11_ENABLED_FLAGS} -O3")
	MESSAGE(STATUS "CMAKE_CXX_FLAGS : ${CMAKE_CXX_FLAGS}")
ELSEIF(WINDOWS)
	MESSAGE(FATAL_ERROR "CAN'T SUPPORT WINDOWS")
ENDIF()

IF(LINUX)
	SET(LINUX_TOOLCHAIN_ROOT /usr/bin)
	SET(CMAKE_CXX_COMPLIER "${LINUX_TOOLCHAIN_ROOT}/g++")
	MESSAGE(STATUS "C++ COMPLIER: ${LINUX_TOOLCHAIN_ROOT}")
ELSEIF(WINDOWS)

ENDIF()

#################set library and head file path#######################
SET(PROJECT_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/include)
MESSAGE(STATUS "PROJECT_INCLUDE_PATH : ${PROJECT_INCLUDE_PATH}")
SET(PROJECT_LIBRARY_PATH ${PROJECT_SOURCE_DIR}/library)
MESSAGE(STATUS "PROJECT_LIBRARY_PATH : ${PROJECT_LIBRARY_PATH}")
IF(LINUX)
	SET(PLATFORM LINUX)
	SET(LINUX_PROJECT_INCLUDE_PATH ${PROJECT_INCLUDE_PATH}/linux)
	SET(LINUX_PROJECT_LIBRARY_PATH ${PROJECT_LIBRARY_PATH}/linux)
ELSEIF(WINDOWS)
	SET(PLATFORM WINDOWS)
	SET(WINDOWS_PROJECT_INCLUDE_PATH ${PROJECT_INCLUDE_PATH}/Windows)
	SET(WINDOWS_PROJECT_LIBRARY_PATH ${PROJECT_LIBRARY_PATH}/Windows)
ENDIF()
SET(COMMON_PROJECT_INCLUDE_PATH ${PROJECT_INCLUDE_PATH}/common)
INCLUDE_DIRECTORIES(${${PLATFORM}_PROJECT_INCLUDE_PATH} ${COMMON_PROJECT_INCLUDE_PATH})
MESSAGE(STATUS "${PLATFORM} INCLUDE PATH : ${${PLATFORM}_PROJECT_INCLUDE_PATH} ${COMMON_PROJECT_INCLUDE_PATH}")
LINK_DIRECTORIES(${${PLATFORM}_PROJECT_LIBRARY_PATH})
MESSAGE(STATUS "${PLATFORM} LIBRARY PATH : ${${PLATFORM}_PROJECT_LIBRARY_PATH}")

########################set library############################
IF(LINUX)
	SET(HPRTHREAD_LIB
		pthread
		)

ELSEIF(WINDOWS)
	SET(HPRTHREAD_LIB
		
		)
ENDIF()

MESSAGE(STATUS "HPRTHREAD_LIB : ${HPRTHREAD_LIB}")

#########################set source files########################
SET(PROJECT_SOURCE_PATH ${PROJECT_SOURCE_DIR}/src)
IF(LINUX)
	SET(LINUX_PROJECT_SOURCE_PATH ${PROJECT_SOURCE_PATH}/linux)
	SET(SRC_LIST ${LINUX_PROJECT_SOURCE_PATH}/Thread.cpp)
	SET(SRC_LIST ${SRC_LIST} ${LINUX_PROJECT_SOURCE_PATH}/ThreadPool.cpp)
	MESSAGE(STATUS "LINUX SOURCE LIST : ${SRC_LIST}")
ELSEIF(WINDOWS)
	SET(WINDOWS_PROJECT_SOURCE_PATH ${PROJECT_SOURCE_PATH/windows})
	SET(SRC_LIST ${WINDOWS_PROJECT_SOURCE_PATH})
	MESSAGE(STATUS "WINDOWS SOURCE LIST ${SRC_LIST}")
ENDIF()

###############################set library link#####################################
IF(BUILD_LIBRARY)
	ADD_LIBRARY(HPRThread SHARED ${SRC_LIST})
	TARGET_LINK_LIBRARIES(HPRThread ${HPRTHREAD_LIB})
ENDIF()

SET(SOURCE_FILE_ROOT_PATH ${PROJECT_SOURCE_DIR}/sample)


##############################complie exectable file###############################
IF(BUILD_SAMPLE)
	AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/sample SAMPLE_TEST_PATH_LIST)
	MESSAGE(STATUS "Sample List : ${SAMPLE_TEST_PATH_LIST}")
	FOREACH(SINGLE_SAMPLE_TEST_PATH ${SAMPLE_TEST_PATH_LIST})
		MESSAGE(STATUS ${SINGLE_SAMPLE_TEST_PATH})
		
		STRING(REGEX MATCH "sample/.*cpp" MATCH_FILE ${SINGLE_SAMPLE_TEST_PATH})
		MESSAGE(STATUS "MATCH_FILE: ${MATCH_FILE}")
	
		STRING(REPLACE "sample/" "" EXECUTABLE_FILE_NAME ${MATCH_FILE})
		MESSAGE(STATUS "EXECUTABLE_FILE_NAME: ${EXECUTABLE_FILE_NAME}")
	
		STRING(REPLACE ".cpp" "" FILE_NAME ${EXECUTABLE_FILE_NAME})
		MESSAGE(STATUS "FILE_NAME: ${FILE_NAME}")
		
		ADD_EXECUTABLE(${FILE_NAME} ${SOURCE_FILE_ROOT_PATH}/${EXECUTABLE_FILE_NAME})
		TARGET_LINK_LIBRARIES(${FILE_NAME} HPRThread)
	ENDFOREACH()
ENDIF()

